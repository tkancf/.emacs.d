* 概要

Emacsのconfig
Make buildでorgファイルを元に、init.elを生成する

* Initialize

#+BEGIN_SRC emacs-lisp
  ;; init.el --- My init.el -*- lexical-binding: t -*-
  ;; Configurations for Emacs
#+END_SRC

* Basic
** 余計な情報を表示しない

ツールバー (Emacsの右上に出てくる保存とかのアイコン)を削除

#+BEGIN_SRC emacs-lisp
  (push '(tool-bar-lines . 0) default-frame-alist)
#+END_SRC

** スタートアップメッセージ非表示

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC

** タブでのインデントを\tからスペースに変更

#+BEGIN_SRC emacs-lisp
  (setq indent-tabs-mode nil)
#+END_SRC

** ビープ音

ビープ音を消す

#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

* Keymap
** カーソル位置から行頭まで削除する
** フォント

#+BEGIN_SRC emacs-lisp
  ;; Cicaフォントの設定
  (set-face-attribute 'default nil
                      :family "Cica"
                      :height 180) ; フォントの大きさは好みで調整してください

  ;; 日本語文字にもCicaフォントを使用
  (set-fontset-font t 'japanese-jisx0208 (font-spec :family "Cica"))
  (set-fontset-font t 'japanese-jisx0212 (font-spec :family "Cica"))
  (set-fontset-font t 'katakana-jisx0201 (font-spec :family "Cica"))

  ;; 絵文字等のためにシンボルフォントも指定する
  (set-fontset-font t 'symbol (font-spec :family "Cica"))
#+END_SRC


#+BEGIN_SRC emacs-lisp
  (defun delete-to-beginning-of-line ()
    (interactive)
    (kill-region (line-beginning-position) (point)))

  (global-set-key (kbd "C-u") 'delete-to-beginning-of-line)
#+END_SRC

** C-xをC-jにもマッピング

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-j") 'Control-X-prefix)
#+END_SRC

* package
** leafのインストール

参考: [[https://github.com/conao3/leaf.el][conao3/leaf.el: Flexible, declarative, and modern init.el package configuration]]

*** leafのインストール

#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (customize-set-variable
     'package-archives '(("org" . "https://orgmode.org/elpa/")
                         ("melpa" . "https://melpa.org/packages/")
                         ("gnu" . "https://elpa.gnu.org/packages/")))
    (package-initialize)
    (unless (package-installed-p 'leaf)
      (package-refresh-contents)
      (package-install 'leaf))

    (leaf leaf-keywords
      :ensure t
      :init
      ;; optional packages if you want to use :hydra, :el-get, :blackout,,,
      (leaf hydra :ensure t)
      (leaf el-get :ensure t)
      (leaf blackout :ensure t)

      :config
      ;; initialize leaf-keywords.el
      (leaf-keywords-init)))
#+END_SRC

** org-mode

*** org-modeの基本設定

#+BEGIN_SRC emacs-lisp
  (leaf org
    :custom
    (org-directory . "~/Dropbox/org/")
    (org-use-speed-commands . t)
    (org-log-done . 'time)
    (org-md-export-with-toc . nil)
    :config
    ;; org-captureのテンプレート
    (setq org-capture-templates
          `(("u" "Todo with Link" entry (file+headline ,(concat org-directory "todo.org") "Todo")
             "* TODO %?\n  %i\n  %a")
            ("t" "Todo" entry (file+headline ,(concat org-directory "todo.org") "Todo")
             "* TODO %?\n SCHEDULED: %t\n")
            ("m" "Memo" entry (file+headline ,(concat org-directory "memo.org") "Memo")
             "* %?\n")
            ("n" "Memo with Link" entry (file+headline ,(concat org-directory "memo.org") "Memo")
             "* %?\nEntered on %U\n  %i\n  %a")
            ("j" "Journal" entry (file ,(concat org-directory "journal.org"))
             "* %<%Y-%m-%d>\n%?\n%i\n")))
    ;; org-agendaのファイル
    (setq org-agenda-files (list (concat org-directory "todo.org")
                                 (concat org-directory "journal.org")))
    :bind
    (("C-c c" . org-capture)
     ("C-c a" . org-agenda)))
#+END_SRC

#+RESULTS:
: org

** GitHub Flavored Markdownをエクスポートするためのパッケージ

#+BEGIN_SRC emacs-lisp

#+END_SRC
