* 概要

Emacsのconfig
Make buildでorgファイルを元に、init.elを生成する

* Initialize

#+BEGIN_SRC emacs-lisp
  ;; init.el --- My init.el -*- lexical-binding: t -*-
  ;; Configurations for Emacs
#+END_SRC

* Basic
** 余計な情報を表示しない

ツールバー (Emacsの右上に出てくる保存とかのアイコン)を削除

#+BEGIN_SRC emacs-lisp
  (push '(tool-bar-lines . 0) default-frame-alist)
#+END_SRC

** スタートアップメッセージ非表示

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC

** タブでのインデントを\tからスペースに変更

#+BEGIN_SRC emacs-lisp
  (setq indent-tabs-mode nil)
#+END_SRC

** ビープ音

ビープ音を消す

#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

** フォント

#+BEGIN_SRC emacs-lisp
  ;; Cicaフォントの設定
  (set-face-attribute 'default nil
                      :family "Cica"
                      :height 180) ; フォントの大きさは好みで調整してください

  ;; 日本語文字にもCicaフォントを使用
  (set-fontset-font t 'japanese-jisx0208 (font-spec :family "Cica"))
  (set-fontset-font t 'japanese-jisx0212 (font-spec :family "Cica"))
  (set-fontset-font t 'katakana-jisx0201 (font-spec :family "Cica"))

  ;; 絵文字等のためにシンボルフォントも指定する
  (set-fontset-font t 'symbol (font-spec :family "Cica"))
#+END_SRC

** カーソル

カーソルの点滅を無効にする

#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode 0)
#+END_SRC

** 自動生成ファイル

作らないようにしたい

#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-list-file-prefix nil)
  (setq create-lockfiles nil)
  (setq auto-save-default nil)
#+END_SRC

** Keymap
*** カーソル位置から行頭まで削除する

#+BEGIN_SRC emacs-lisp
  (defun delete-to-beginning-of-line ()
    (interactive)
    (kill-region (line-beginning-position) (point)))

  (global-set-key (kbd "C-u") 'delete-to-beginning-of-line)
#+END_SRC

*** C-j, C-xのスワップ

xは何度も押してると貧弱な薬指が痛くなるので入れ替える

#+BEGIN_SRC emacs-lisp
  (define-key key-translation-map (kbd "C-j") (kbd "C-x"))
  (define-key key-translation-map (kbd "C-x") (kbd "C-j"))
#+END_SRC

*** s-jにM-xの割当

xは何度も押してると貧弱な薬指が痛くなるのでs-jに同じ役割をもたせる

#+BEGIN_SRC emacs-lisp
  (define-key key-translation-map (kbd "s-j") (kbd "M-x"))
#+END_SRC

* package
** leaf

- 参考
  - [[https://github.com/conao3/leaf.el][conao3/leaf.el: Flexible, declarative, and modern init.el package configuration]]
  -  [[https://qiita.com/conao3/items/347d7e472afd0c58fbd7#initel%E3%81%AE%E4%BD%9C%E6%88%90][Emacs入門から始めるleaf.el入門 #Emacs - Qiita]]

*** leafの初期設定

#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (customize-set-variable
     'package-archives '(("org" . "https://orgmode.org/elpa/")
                         ("melpa" . "https://melpa.org/packages/")
                         ("gnu" . "https://elpa.gnu.org/packages/")))
    (package-initialize)
    (unless (package-installed-p 'leaf)
      (package-refresh-contents)
      (package-install 'leaf))

    (leaf leaf-keywords
      :ensure t
      :init
      ;; optional packages if you want to use :hydra, :el-get, :blackout,,,
      (leaf hydra :ensure t)
      (leaf el-get :ensure t)
      (leaf blackout :ensure t)

      :config
      ;; initialize leaf-keywords.el
      (leaf-keywords-init)))
#+END_SRC

*** leaf便利パッケージ

- leaf-convert
  - プレーンなElispやuse-packageからleafへの変換機能
    - ~M-x leaf-convert-replace-pop~, ~M-x leaf-convert-replace-region~
- leaf-tree
  - ~M-x leaf-tree-mode~

#+BEGIN_SRC emacs-lisp
  (leaf leaf
    :config
    (leaf leaf-convert :ensure t)
    (leaf leaf-tree
      :ensure t
      :custom ((imenu-list-size . 30)
               (imenu-list-position . 'left))))
#+END_SRC

- macrostep
  - ~C-c e~ でleafマクロを展開する
  - デバッグで使うらしい

#+BEGIN_SRC emacs-lisp
  (leaf macrostep
    :ensure t
    :bind (("C-c e" . macrostep-expand)))
#+END_SRC

** Theme

#+BEGIN_SRC emacs-lisp
  (leaf doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-one t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+END_SRC

** whitch-key

キーボードショートカットのヘルプを表示してくれる

#+BEGIN_SRC emacs-lisp
  (leaf which-key
    :ensure t
    :leaf-defer t
    :custom ((which-key-idle-delay . 1.0))
    :config
    (which-key-mode 1))
#+END_SRC

** 補完(テキスト入力)
*** corfu

補完用フロントエンド
[[https://github.com/minad/corfu][github.com/minad/corfu]]

#+BEGIN_SRC emacs-lisp
  (leaf corfu
    :ensure t
    :custom
    ((corfu-auto . t)
     (corfu-auto-delay . 0.1)
     (corfu-cycle . t)
     (corfu-auto-prefix . 2) ;; 補完候補を2文字で出す
     (corfu-on-exact-match . nil))
    :config
    ;; 基本設定
    (global-corfu-mode 1)

    ;; indentモードでの補完を強化
    (with-eval-after-load 'indent
      (setq tab-always-indent 'complete)))
#+END_SRC

*** cape

corfu向けに補完候補を提供するパッケージ
[[https://github.com/minad/cape][github.com/minad/cape]]

- cape-abbrev：完全な省略形（add-global-abbrev、add-mode-abbrev）。
- cape-dabbrev: 現在のバッファからの完全なワード。dabbrev-capfEmacs 29も参照してください。
- cape-dict: 辞書ファイルからの完全な単語。
- cape-elisp-block: Org または Markdown コード ブロックで Elisp を完成させます。
- cape-elisp-symbol: 完全な Elisp シンボル。
- cape-emoji: 絵文字を完成させます。 Emacs 29 以降で利用可能です。
- cape-file: 完全なファイル名。
- cape-history: Eshell、Comint、またはミニバッファーの履歴から完了します。
- cape-keyword: 完全なプログラミング言語キーワード。
- cape-line: 現在のバッファから行全体を完成させます。
- cape-rfc1345: RFC 1345 ニーモニックを使用した完全な Unicode 文字。
- cape-sgml: SGML エンティティからの完全な Unicode 文字 (例: ) &alpha。
- cape-tex: TeX コマンドからの完全な Unicode 文字。例\hbar:

#+BEGIN_SRC emacs-lisp
  (leaf cape
    :ensure t
    :init
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-elisp-block)
    (add-to-list 'completion-at-point-functions #'cape-history)
    (add-to-list 'completion-at-point-functions #'cape-keyword)
    :config
    )
#+END_SRC

** 補完(ミニバッファ)

参考: [[https://joppot.info/posts/2d8a8c1d-6d7f-4cf8-a51a-0f7e5c7e3c80][helmからモダンなvertico + consult + recentf + orderless + marginaliaに移行してみた]]

*** vertico

[[https://github.com/minad/vertico][github.com/minad/vertico]]
M-xとか、C-j C-fでのファイル検索とかミニバッファでの操作がVimのUniteとかTelescopeみたいになる

#+BEGIN_SRC emacs-lisp
  (leaf vertico
    :ensure t
    :custom
    (vertico-count . 15) ; 候補数を15に増やす
    :init
    (vertico-mode))
#+END_SRC

*** orderless

verticoデフォルトだと、スペース区切りでfuzzyに絞り込みできないので、それを可能にするためのパッケージ

#+BEGIN_SRC emacs-lisp
  (leaf orderless
    :ensure t
    :init
    ;; Set completion style for Emacs
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles . (partial-completion))))))
#+END_SRC

** recentf

#+BEGIN_SRC emacs-lisp
  (leaf recentf
    :config
    (setq recentf-max-saved-items 15             ; consult-bufferに表示する最近使ったファイルの最大表示数
          recentf-exclude '(".recentf" "^/ssh:") ; recentfの履歴に含ませないファイルリスト
          recentf-auto-cleanup 'never)           ; recentfの履歴を削除しない

    (setq recentf-auto-save-timer
          (run-with-idle-timer 30 t 'recentf-save-list)) ; バッファを開いて30秒以上したら履歴に登録
    (recentf-mode 1))
#+END_SRC

** Consult

検索、ナビゲーション等いろんな昨日を追加してくれる
Consult-bufferが便利で、カスタマイズすることで、最近開いたファイル、ブックマークしたファイルを一度に表示できるので、それをverticoで絞り込んで移動出来るようになる

#+BEGIN_SRC emacs-lisp
  (leaf consult
    :ensure t
    :bind (("C-x b" . consult-buffer)
           ("M-g M-g" . consult-goto-line)  ;; goto-lineをconsult-goto-lineに置き換え
           ("C-c s" . consult-line)         ;; バッファ内をキーワードで検索
           ("C-c o" . consult-outline)))    ;; アウトライン
#+END_SRC

** Evil

- Vim likeキーバインド
  - Meowも試したけどテキストオブジェクトが使えなかったりで合わなかった
  - EvilのほうがVimに寄せようとしている感じが強い
    - テキストオブジェクトも使える
  - org-modeでう〜んってなった部分はevil-orgを入れてかなり改善した

*** Evil

**** こだわりポイントメモ

- EscでのEmacsステートからの脱出
  - Vimに近い感覚で、とりあえずEsc押せばOKを実現できる
- Super-oでのトグル
  - デフォルトのC-zは小指が壊れるかと思った
  - ノーマルモードでm押してEmacsステートとかも設定してたけど、どこからでもトグル出来るって感覚のほうが覚えやすかった

**** 設定

#+BEGIN_SRC emacs-lisp
  (leaf evil
    :ensure t
    :after evil-leader
    :config
    (evil-mode 1)
    (setq evil-normal-state-cursor '(box "#EFEBEB"))
    (setq evil-insert-state-cursor '(bar "#EFEBEB"))
    (setq evil-default-cursor '(hbar "#7355AE"))
    (with-eval-after-load 'evil-maps
      ;; :と;をスワップ
      (define-key evil-motion-state-map ";" 'evil-ex)
      (define-key evil-motion-state-map ":" 'evil-repeat-find-char)

      ;; C-uでVimと同じようにスクロール 
      (define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)

      ;; ステート切り替えキーを変更
      ;; EmacsステートからESCでEvilモードに復帰
      (define-key evil-emacs-state-map (kbd "ESC") 'evil-normal-state)
      ;; あらゆるモードからSuper-oでステートをトグル
      (define-key evil-emacs-state-map (kbd "s-o") 'evil-normal-state)
      (define-key evil-normal-state-map (kbd "s-o") 'evil-emacs-state)
      (define-key evil-insert-state-map (kbd "s-o") 'evil-emacs-state)
      (define-key evil-visual-state-map (kbd "s-o") 'evil-emacs-state)

      ;; インサートステートでのキーマップをEmacsにちょっと寄せる
      ;; nilを定義するとEmacsデフォルトの挙動になる
      (define-key evil-insert-state-map (kbd "TAB") 'nil)
      (define-key evil-insert-state-map (kbd "C-a") 'nil)
      (define-key evil-insert-state-map (kbd "C-e") 'nil)
      (define-key evil-insert-state-map (kbd "C-n") 'nil)
      (define-key evil-insert-state-map (kbd "C-p") 'nil)
      (define-key evil-insert-state-map (kbd "C-f") 'nil)
      (define-key evil-insert-state-map (kbd "C-b") 'nil)
      (define-key evil-insert-state-map (kbd "C-k") 'nil)
      (define-key evil-insert-state-map (kbd "C-r") 'nil)
      ))
#+END_SRC

*** evil-leader

#+BEGIN_SRC emacs-lisp
  (leaf evil-leader
    :ensure t
    :require t
    :config
    ;; global-evil-leader-modeが未設定の場合のみ、有効化
    (unless (bound-and-true-p global-evil-leader-mode)
      (global-evil-leader-mode 1))
    ;; リーダーキーとしてスペースキーを設定
    (evil-leader/set-leader "<SPC>")
    (evil-leader/set-key
      "<SPC>" 'execute-extended-command
      "b" 'consult-buffer
      "c" 'org-capture
      "a" 'org-agenda
      "rc" 'org-roam-capture
      "rf" 'org-roam-node-find
      "ri" 'org-roam-node-insert
      "rg" 'org-id-get-create
      ))
#+END_SRC

*** evil-surround

vim-surroundみたいな動きを可能にする

#+BEGIN_SRC emacs-lisp
  (leaf evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1))
#+END_SRC

*** evil-org

参考: [[https://github.com/Somelauw/evil-org-mode][github.com/Somelauw/evil-org-mode]]

#+BEGIN_SRC emacs-lisp
  (leaf evil-org
    :ensure t
    :after org evil
    :hook (org-mode-hook . evil-org-mode)
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+END_SRC

** yasnippet

スニペット設定

スニペット自体は ~~/.emacs.d/snippets/~ 配下

#+BEGIN_SRC emacs-lisp
  (leaf yasnippet
    :ensure t
    :init
    (yas-global-mode 1)
    :config
    (add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets")
    (yas-reload-all))
#+END_SRC

** projectile

#+BEGIN_SRC emacs-lisp
  (leaf projectile
    :ensure t
    :config
    (projectile-mode +1)
    ;;(setq projectile-project-search-path '("~/projects"))
    (setq projectile-globally-ignored-files '("*.jpg" "*.png"))
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+END_SRC

** org-mode
*** org-modeの基本設定

#+BEGIN_SRC emacs-lisp
  (leaf org
    :custom
    (org-directory . "~/Dropbox/org/")
    (org-use-speed-commands . t)
    (org-log-done . 'time)
    (org-md-export-with-toc . nil)
    :config
    ;; org-captureのテンプレート
    (custom-set-variables
     '(org-capture-templates
       `(("u" "Todo with Link" entry (file+headline ,(concat org-directory "todo.org") "Todo")
          "* TODO %?\n  %i\n  %a")
         ("t" "Todo" entry (file+headline ,(concat org-directory "todo.org") "Todo")
          "* TODO %?\n SCHEDULED: %t\n")
         ("m" "Memo" entry (file+headline ,(concat org-directory "memo.org") "Memo")
          "* %?\n")
         ("n" "Memo with Link" entry (file+headline ,(concat org-directory "memo.org") "Memo")
          "* %?\nEntered on %U\n  %i\n  %a")
         ("j" "Journal" entry (file ,(concat org-directory "journal.org"))
          "* %<%Y-%m-%d>\n%?\n%i\n")))
     ;; org-agendaのファイル
     '(org-agenda-files (list (concat org-directory "todo.org")
                              (concat org-directory "journal.org"))))
    :bind
    ("C-c c" . org-capture)
    ("C-c a" . org-agenda))
#+END_SRC
*** org-roam

org-roamの設定

#+BEGIN_SRC emacs-lisp
  (leaf org-roam
    :ensure t
    :custom ((org-roam-directory . org-directory))
    :bind (("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           ("C-c r" . org-roam-capture))
    :config
    (org-roam-setup)
    ;; キャプチャテンプレートの設定
    (setq org-roam-capture-templates
          '(("f" "Fleeting(一時メモ)" plain "%?"
             :target (file+head "fleeting/%<%Y%m%d%H%M%S>-${slug}.org" "#+TITLE: ${title}\n")
             :unnarrowed t)
            ("l" "Literature(文献)" plain "%?"
             :target (file+head "literature/%<%Y%m%d%H%M%S>-${slug}.org" "#+TITLE: ${title}\n")
             :unnarrowed t)
            ("p" "Permanent(記事)" plain "%?"
             :target (file+head "permanent/%<%Y%m%d%H%M%S>-${slug}.org" "#+TITLE: ${title}\n")
             :unnarrowed t)
            ("b" "Publish(ブログ・Zenn・Qiitaなど)" plain "%?"
             :target (file+head "publish/${slug}.org" "#+TITLE: ${title}\n")
             :unnarrowed t))))
#+END_SRC

** GitHub Flavored Markdownをエクスポートするためのパッケージ

#+BEGIN_SRC emacs-lisp
(leaf ox-gfm
  :ensure t
  :after org)
#+END_SRC

** dired
*** dired-toggle

画面左にdiredを開くコマンド

#+BEGIN_SRC emacs-lisp
  (leaf dired-toggle
    :ensure t
    :bind (("C-x -" . dired-toggle))
    :config
    )
#+END_SRC

* provide

参考: [[https://qiita.com/conao3/items/347d7e472afd0c58fbd7#initel%E3%81%AE%E4%BD%9C%E6%88%90][Emacs入門から始めるleaf.el入門 #Emacs - Qiita]]

#+BEGIN_SRC emacs-lisp
  (provide 'init)

  ;; Local Variables:
  ;; indent-tabs-mode: nil
  ;; End:

  ;;; init.el ends here
#+END_SRC
