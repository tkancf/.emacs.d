* Introduction
** 概要

tkancfのEmacsのconfigファイル\\
orgファイルから設定を生成する。

- Repository
  - https://github.com/tkancf/tkancf.com
- blog
  - https://tkancf.com

** 利用方法

~make build~ すると ~init.org~ から ~init.el~ が生成されて、 ~init.el~ のコンパイルが実行される。\\
部分的にorgファイルを更新したときは、 ~C-c C-c~ で一部実行可能。

** 全体のファイル構成

- init.org
  - 更新する際は基本的にこのファイルを更新する
- snippets/
  - yasnippetというパッケージで利用するスニペットの管理用ディレクトリ

** 設定方針

- テキスト編集はevil-modeに頼る
  - Vimmerなので、Vim likeキーバインドがないと無力
  - evil-modeでVimを再現しようとはしない
- GUIのEmacs利用のみを想定する
  - superキーを多様する
- なるべく左手小指の負担を減らす

* Header

意味はよくわかってないが、よく書いてるのを見かけるので一応書いておく。

#+BEGIN_SRC emacs-lisp :results none
  ;; init.el --- My init.el -*- lexical-binding: t -*-
  ;; Configurations for Emacs
#+END_SRC

* Basic
** 余計な情報を表示しない

デフォルトだと、GUI上にツールバー (Emacsの右上に出てくる保存とかのアイコン)が出てくる。\\
不要なのでツールバーは削除

#+BEGIN_SRC emacs-lisp :results none
  (push '(tool-bar-lines . 0) default-frame-alist)
#+END_SRC

** スタートアップメッセージ非表示

スタート画面にアイコンとか別にいらないので削除\\
起動時に scratchバッファから開始になる

#+BEGIN_SRC emacs-lisp :results none
  (setq inhibit-startup-message t)
#+END_SRC

** タブでのインデント

インデントをタブ文字からスペースに変更

#+BEGIN_SRC emacs-lisp :results none
  (setq indent-tabs-mode nil)
#+END_SRC

** ビープ音

ビープ音を消す

#+BEGIN_SRC emacs-lisp :results none
  (setq ring-bell-function 'ignore)
#+END_SRC

** フォント

Cicaフォントを利用する

#+BEGIN_SRC emacs-lisp :results none
  ;; Cicaフォントの設定
  (set-face-attribute 'default nil
                      :family "Cica"
                      :height 180)

  ;; 日本語文字にもCicaフォントを使用
  (set-fontset-font t 'japanese-jisx0208 (font-spec :family "Cica"))
  (set-fontset-font t 'japanese-jisx0212 (font-spec :family "Cica"))
  (set-fontset-font t 'katakana-jisx0201 (font-spec :family "Cica"))

  ;; 絵文字等のためにシンボルフォントも指定する
  (set-fontset-font t 'symbol (font-spec :family "Cica"))
#+END_SRC

** カーソル

カーソルの点滅を無効にする

#+BEGIN_SRC emacs-lisp :results none
  (blink-cursor-mode 0)
#+END_SRC

** 自動生成ファイル

作らないようにしたい

#+BEGIN_SRC emacs-lisp :results none
  (setq make-backup-files nil)
  (setq auto-save-list-file-prefix nil)
  (setq create-lockfiles nil)
  (setq auto-save-default nil)
#+END_SRC

* Keymap
** カーソル位置から行頭まで削除する

~C-u~ でカーソル位置から行頭まで削除する\\
カーソルが先頭にあるときは、改行を削除する

#+BEGIN_SRC emacs-lisp :results none
  (defun my/delete-to-beginning-of-line ()
    (interactive)
    (if (bolp)  ; bolp は point が行の先頭にあるかを確認する
        (if (not (bobp))  ; bobp は point がバッファの先頭にあるかを確認する
            (delete-char -1))  ; バッファの先頭でなければ、前の行の改行を削除する
      (kill-region (line-beginning-position) (point))))  ; そうでなければ、行の先頭から現在位置までを削除する

  (global-set-key (kbd "C-u") 'my/delete-to-beginning-of-line)
#+END_SRC

** C-j, C-xのスワップ

xは何度も押してると貧弱な薬指が痛くなるので入れ替える

#+BEGIN_SRC emacs-lisp :results none
  (define-key key-translation-map (kbd "C-j") (kbd "C-x"))
  (define-key key-translation-map (kbd "C-x") (kbd "C-j"))
#+END_SRC

** scratchバッファでは、C-<Enter>でEmacs lispを実行

scratchバッファというか、lisp-interaction-modeで有効化する

#+BEGIN_SRC emacs-lisp :results none
  (defun my-lisp-interaction-mode-hook ()
    (local-set-key (kbd "C-<return>") 'eval-print-last-sexp))
  (add-hook 'lisp-interaction-mode-hook 'my-lisp-interaction-mode-hook)
#+END_SRC

** s-jにM-xの割当

xは何度も押してると貧弱な薬指が痛くなるのでs-jに同じ役割をもたせる

#+BEGIN_SRC emacs-lisp :results none
  (define-key key-translation-map (kbd "s-j") (kbd "M-x"))
#+END_SRC

** s-kに*の割当

org-modeで*を連打してるとShiftキーのせいで左手の小指が痛くなるので

#+BEGIN_SRC emacs-lisp :results none
  (defun insert-asterisk ()
    "Insert an asterisk at the cursor position."
    (interactive)
    (insert "*"))

  (global-set-key (kbd "s-k") 'insert-asterisk)
#+END_SRC

* Package
** use-package: パッケージ管理

#+BEGIN_SRC emacs-lisp :results none
  (eval-and-compile
    (customize-set-variable
     'package-archives '(("org" . "https://orgmode.org/elpa/")
                         ("melpa" . "https://melpa.org/packages/")
                         ("gnu" . "https://elpa.gnu.org/packages/")))
    (package-initialize)
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package)))
#+END_SRC

** Theme: カラーテーマ

#+BEGIN_SRC emacs-lisp :results none
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-acario-light t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-acario-light") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+END_SRC

** whitch-key: ショートカットのヘルプ

キーボードショートカットのヘルプを表示してくれる

#+BEGIN_SRC emacs-lisp :results none
  (use-package which-key
    :ensure t
    :custom ((which-key-idle-delay 1.0))
    :config
    (which-key-mode 1))
#+END_SRC

** 補完: corfu, cape
*** corfu

補完用フロントエンド

[[https://github.com/minad/corfu][GitHub - minad/corfu: :desert_island: corfu.el - COmpletion in Region FUnction]]

#+BEGIN_SRC emacs-lisp :results none
  (use-package corfu
    :ensure t
    :custom
    ((corfu-auto t)
     (corfu-auto-delay 0.1)
     (corfu-cycle t)
     (corfu-auto-prefix 2) ;; 補完候補を2文字で出す
     (corfu-on-exact-match nil))
    :config
    ;; 基本設定
    (global-corfu-mode 1)

    ;; indentモードでの補完を強化
    (with-eval-after-load 'indent
      (setq tab-always-indent 'complete)))
#+END_SRC

*** cape

corfu向けに補完候補を提供するパッケージ

- cape-abbrev：完全な省略形（add-global-abbrev、add-mode-abbrev）。
- cape-dabbrev: 現在のバッファからの完全なワード。dabbrev-capfEmacs 29も参照してください。
- cape-dict: 辞書ファイルからの完全な単語。
- cape-elisp-block: Org または Markdown コード ブロックで Elisp を完成させます。
- cape-elisp-symbol: 完全な Elisp シンボル。
- cape-emoji: 絵文字を完成させます。 Emacs 29 以降で利用可能です。
- cape-file: 完全なファイル名。
- cape-history: Eshell、Comint、またはミニバッファーの履歴から完了します。
- cape-keyword: 完全なプログラミング言語キーワード。
- cape-line: 現在のバッファから行全体を完成させます。
- cape-rfc1345: RFC 1345 ニーモニックを使用した完全な Unicode 文字。
- cape-sgml: SGML エンティティからの完全な Unicode 文字 (例: ) &alpha。
- cape-tex: TeX コマンドからの完全な Unicode 文字。例\hbar:

#+BEGIN_SRC emacs-lisp :results none
  (use-package cape
    :ensure t
    :init
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-elisp-block)
    (add-to-list 'completion-at-point-functions #'cape-history)
    (add-to-list 'completion-at-point-functions #'cape-keyword)
    :config
    )
#+END_SRC

** ミニバッファ: vertico, consult, orderless, marginalia, recentf

参考: [[https://joppot.info/posts/2d8a8c1d-6d7f-4cf8-a51a-0f7e5c7e3c80][helmからモダンなvertico + consult + recentf + orderless + marginaliaに移行してみた]]

*** vertico

M-xとか、C-j C-fでのファイル検索とかミニバッファでの操作がVimのUniteとかTelescopeみたいになる
[[https://github.com/minad/vertico][GitHub - minad/vertico: :dizzy: vertico.el - VERTical Interactive COmpletion]]

#+BEGIN_SRC emacs-lisp :results none
  (use-package vertico
    :ensure t
    :custom
    (vertico-count 15) ; 候補数を15に増やす
    :init
    (vertico-mode))
#+END_SRC

*** orderless

verticoデフォルトだと、スペース区切りでfuzzyに絞り込みできないので、それを可能にするためのパッケージ

#+BEGIN_SRC emacs-lisp :results none
  (use-package orderless
    :ensure t
    :init
    ;; Set completion style for Emacs
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles . (partial-completion))))))
#+END_SRC

*** marginalia

consultで一覧表示した時に、コマンドの説明文とかが表示される

#+BEGIN_SRC emacs-lisp :results none
  (use-package marginalia
    :ensure t
    :init
    (marginalia-mode)
    :bind (:map minibuffer-local-map
                ("M-A" . marginalia-cycle)))
#+END_SRC

*** recentf

開いたファイルの履歴を保持する

#+BEGIN_SRC emacs-lisp :results none
  (use-package recentf
    :config
    (setq recentf-max-saved-items 15             ; consult-bufferに表示する最近使ったファイルの最大表示数
          recentf-exclude '(".recentf" "^/ssh:") ; recentfの履歴に含ませないファイルリスト
          recentf-auto-cleanup 'never)           ; recentfの履歴を削除しない

    (defun my/silent-recentf-save-list ()
      "Save the recent list without any messages."
      (interactive)
      (let ((inhibit-message t))
        (recentf-save-list)))

    (setq recentf-auto-save-timer
          (run-with-idle-timer 30 t 'my/silent-recentf-save-list)) ; バッファを開いて30秒以上したら履歴に登録
    (recentf-mode 1))
#+END_SRC

*** Consult

検索、ナビゲーション等いろんな昨日を追加してくれる
Consult-bufferが便利で、カスタマイズすることで、最近開いたファイル、ブックマークしたファイルを一度に表示できるので、それをverticoで絞り込んで移動出来るようになる

#+BEGIN_SRC emacs-lisp :results none
  (use-package consult
    :ensure t
    :bind (("C-x b" . consult-buffer)
           ("M-g M-g" . consult-goto-line)  ;; goto-lineをconsult-goto-lineに置き換え
           ("C-c s" . consult-line)         ;; バッファ内をキーワードで検索
           ("C-c o" . consult-outline)))    ;; アウトライン
#+END_SRC

** Evil: Vim likeキーバインド

- Vim likeキーバインド
  - Meowも試したけどテキストオブジェクトが使えなかったりで合わなかった
  - EvilのほうがVimに寄せようとしている感じが強い
    - テキストオブジェクトも使える
  - org-modeでう〜んってなった部分はevil-orgを入れてかなり改善した

*** Evil

- こだわりポイントメモ
  - EscでのEmacsステートからの脱出
    - Vimに近い感覚で、とりあえずEsc押せばOKを実現できる
  - Super-oでのトグル
    - デフォルトのC-zは小指が壊れるかと思った
    - ノーマルモードでm押してEmacsステートとかも設定してたけど、どこからでもトグル出来るって感覚のほうが覚えやすかった

#+BEGIN_SRC emacs-lisp :results none
  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1)
    ;; カーソルの色と形を変更
    (setq evil-normal-state-cursor '(box "#000000"))
    (setq evil-insert-state-cursor '(bar "#000000"))
    (setq evil-default-cursor '(hbar "#000000"))
    ;; 単語境界設定
    ;; _を単語の一部として扱う
    (modify-syntax-entry ?_ "w" (standard-syntax-table))
    ;; ?を単語の一部として扱う
    (modify-syntax-entry ?? "w" (standard-syntax-table))
    ;; -を単語の一部として扱う
    (modify-syntax-entry ?- "w" (standard-syntax-table))
    ;; 検索
    (setq evil-search-module 'evil-search)
    ;; undoシステムにundo-treeを使う
    (evil-set-undo-system 'undo-tree)
    ;; キーマップ
    (with-eval-after-load 'evil-maps
      ;; :と;をスワップ
      (define-key evil-motion-state-map ";" 'evil-ex)
      (define-key evil-motion-state-map ":" 'evil-repeat-find-char)

      ;; C-uでVimと同じようにスクロール 
      (define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)

      ;; ステート切り替えキーを変更
      ;; EmacsステートからESCでEvilモードに復帰
      (define-key evil-emacs-state-map (kbd "ESC") 'evil-normal-state)
      ;; あらゆるモードからSuper-oでステートをトグル
      (define-key evil-emacs-state-map (kbd "s-o") 'evil-normal-state)
      (define-key evil-normal-state-map (kbd "s-o") 'evil-emacs-state)
      (define-key evil-insert-state-map (kbd "s-o") 'evil-emacs-state)
      (define-key evil-visual-state-map (kbd "s-o") 'evil-emacs-state)

      ;; インサートステートでのキーマップをEmacsにちょっと寄せる
      ;; nilを定義するとEmacsデフォルトの挙動になる
      (define-key evil-insert-state-map (kbd "TAB") 'nil)
      (define-key evil-insert-state-map (kbd "C-a") 'nil)
      (define-key evil-insert-state-map (kbd "C-e") 'nil)
      (define-key evil-insert-state-map (kbd "C-n") 'nil)
      (define-key evil-insert-state-map (kbd "C-p") 'nil)
      (define-key evil-insert-state-map (kbd "C-f") 'nil)
      (define-key evil-insert-state-map (kbd "C-b") 'nil)
      (define-key evil-insert-state-map (kbd "C-k") 'nil)
      (define-key evil-insert-state-map (kbd "C-r") 'nil)

      ;; Super-↔️↕️でウィンドウ移動
      (with-eval-after-load 'org-agenda
        (global-set-key (kbd "s-<left>") 'evil-window-left)
        (global-set-key (kbd "s-<right>") 'evil-window-right)))
    ;; visualステートの*で選択文字列を検索

    (defun my/evil-visual-search-forward ()
      "Search forward for the visually selected text."
      (interactive)
      (let ((selection (buffer-substring-no-properties (region-beginning) (region-end))))
        (deactivate-mark)  ; Optionally deactivate the mark
        (evil-search selection t t)))

    (defun my/evil-visual-search-backward ()
      "Search backward for the visually selected text."
      (interactive)
      (let ((selection (buffer-substring-no-properties (region-beginning) (region-end))))
        (deactivate-mark)  ; Optionally deactivate the mark
        (evil-search selection nil t)))
    (define-key evil-visual-state-map (kbd "*") 'my/evil-visual-search-forward)
    (define-key evil-visual-state-map (kbd "#") 'my/evil-visual-search-backward))
#+END_SRC

*** evil-collection

[[https://github.com/emacs-evil/evil-collection][GitHub - emacs-evil/evil-collection: A set of keybindings for evil-mode]]

#+BEGIN_SRC emacs-lisp :results none
  (use-package evil-collection
    :ensure t
    :after evil
    :config
    (evil-collection-init))
#+END_SRC

*** evil-surround

vim-surroundみたいな動きを可能にする

#+BEGIN_SRC emacs-lisp :results none
  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1))
#+END_SRC

*** evil-org

参考: [[https://github.com/Somelauw/evil-org-mode][GitHub - Somelauw/evil-org-mode: Supplemental evil-mode keybindings to emacs org-mode]]

#+BEGIN_SRC emacs-lisp :results none
  (use-package evil-org
    :ensure t
    :after org
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+END_SRC

*** evil-multiedit

#+BEGIN_SRC emacs-lisp :results	none
  (use-package evil-multiedit
    :ensure t
    :config
    (evil-multiedit-default-keybinds))
#+END_SRC

** yasnippet: スニペット

yasnippetが定番らしい\\
スニペット自体は ~/.emacs.d/snippets/ 配下で設定する

#+BEGIN_SRC emacs-lisp :results none
  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1)
    :config
    (add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets")
    (yas-reload-all))
#+END_SRC

** projectile: プロジェクト管理

projectile

#+BEGIN_SRC emacs-lisp :results none
  (use-package projectile
    :ensure t
    :config
    (projectile-mode +1)
    ;;(setq projectile-project-search-path '("~/projects"))
    (setq projectile-globally-ignored-files '("*.jpg" "*.png"))
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+END_SRC

** org-mode
*** org-mode 基本設定

#+BEGIN_SRC emacs-lisp :results none
  (use-package org
    :custom
    (org-directory "~/Dropbox/org/")
    (org-use-speed-commands t)
    (org-log-done 'time)
    (org-md-export-with-toc nil)
    :config
    ;; org-agendaのファイル
    (defvar my/org-agenda-files `(,(concat org-directory "")
                                  ,(concat org-directory "/project")
                                  ,(concat org-directory "/fleeting")))

    (setq org-agenda-files my/org-agenda-files)
    (defun my/update-org-agenda-files ()
      (interactive)
      (setq org-agenda-files my/org-agenda-files))

    ;; org-archiveの設定
    (setq org-archive-location (concat (file-name-as-directory org-directory) "archive/%s_archive::"))

    ;; org-agendaの設定
    (defun my-skip-repeat-org ()
      "Skip entries from the repeat.org file located in org-directory."
      (let ((repeat-org-file (expand-file-name "repeat.org" org-directory)))
        (save-excursion
          (let ((subtree-end (save-excursion (org-end-of-subtree t))))
            (if (string= (buffer-file-name) repeat-org-file)
                subtree-end
              nil)))))

    (setq org-agenda-custom-commands
          '(("o" "Overview of today and TODOs"
             ((agenda "" ((org-agenda-span 'day)))
              (todo "TODO"
                    ((org-agenda-overriding-header "Unfinished TODOs:")
                     (org-agenda-skip-function 'my-skip-repeat-org)))))))

    :bind
    ("C-c c" . org-capture)
    ("C-c a" . org-agenda)
    ("C-c l" . org-store-link)
    ("C-c g" . org-id-get-create))
#+END_SRC

*** org-id

#+BEGIN_SRC emacs-lisp :results	none
  (use-package org-id
    :after org  ; org-modeがロードされた後に読み込む
    :config
    (setq org-id-link-to-org-use-id t)  ; org-idを利用してリンクを生成する設定
    (setq org-id-locations-file (expand-file-name ".org-id-locations" org-directory)))  ; IDの位置情報ファイルの設定
#+END_SRC

*** org-capture

#+BEGIN_SRC emacs-lisp :results	none
  ;; org-captureのテンプレート
  (use-package org-capture
    :config
    (setq org-capture-templates `(
                                  ;; よく使うものに絵文字つけとく
                                  ("t" "☑Todo" entry (file+headline ,(concat org-directory "todo.org") "Todo")
                                   "* TODO %?\n SCHEDULED: %t\n")
                                  ("m" "📝Memo" entry (file+headline ,(concat org-directory "memo.org") "Memo")
                                   "* %?\n")

                                  ("n" "Memo with Link" entry (file+headline ,(concat org-directory "memo.org") "Memo")
                                   "* %?\nEntered on %U\n  %i\n  %a")
                                  ("u" "Todo with Link" entry (file+headline ,(concat org-directory "todo.org") "Todo")
                                   "* TODO %?\n  %i\n  %a")
                                  )))
#+END_SRC

*** org-roam: roam-research like

#+BEGIN_SRC emacs-lisp :results none
  (use-package org-roam
    :ensure t
    :custom ((org-roam-directory org-directory))
    :bind (("C-c n n" . org-roam-capture)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           )
    :config
    (org-roam-setup)
    ;; キャプチャテンプレートの設定
    (setq org-roam-capture-templates
          '(("f" "Fleeting(一時メモ)" plain "%?"
             :target (file+head "fleeting/%<%Y%m%d%H%M%S>-${slug}.org" "#+TITLE: ${title}\n#+filetags: :fleeting-note:\n")
             :unnarrowed t)
            ("l" "Literature(文献)" plain "%?"
             :target (file+head "literature/%<%Y%m%d%H%M%S>-${slug}.org" "#+TITLE: ${title}\n#+filetags: :literature-note:\n")
             :unnarrowed t)
            ("p" "Permanent(記事)" plain "%?"
             :target (file+head "permanent/%<%Y%m%d%H%M%S>-${slug}.org" "#+TITLE: ${title}\n#+filetags: :permanent-note:\n")
             :unnarrowed t)
            ("b" "Publish(ブログ・Zenn・Qiitaなど)" plain "%?"
             :target (file+head "publish/${slug}.org" "#+TITLE: ${title}\n#+filetags: :publish-note:\n")
             :unnarrowed t)))
    )

#+END_SRC

*** consult-org-roam

#+BEGIN_SRC emacs-lisp :results	none
  (use-package consult-org-roam
    :ensure t
    :after org-roam
    :init
    (require 'consult-org-roam)
    ;; Activate the minor mode
    (consult-org-roam-mode 1)
    :custom
    ;; Use `ripgrep' for searching with `consult-org-roam-search'
    (consult-org-roam-grep-func #'consult-ripgrep)
    ;; Configure a custom narrow key for `consult-buffer'
    (consult-org-roam-buffer-narrow-key ?r)
    ;; Display org-roam buffers right after non-org-roam buffers
    ;; in consult-buffer (and not down at the bottom)
    (consult-org-roam-buffer-after-buffers t)
    :config
    ;; Eventually suppress previewing for certain functions
    (consult-customize
     consult-org-roam-forward-links
     :preview-key "M-.")
    :bind
    ;; Define some convenient keybindings as an addition
    ("C-c n e" . consult-org-roam-file-find)
    ("C-c n b" . consult-org-roam-backlinks)
    ("C-c n B" . consult-org-roam-backlinks-recursive)
    ("C-c n l" . consult-org-roam-forward-links)
    ("C-c n r" . consult-org-roam-search))
#+END_SRC

*** org-modern: org-modeをおしゃれに表示

#+BEGIN_SRC emacs-lisp :results none
  (use-package org-modern
    :ensure t)
#+END_SRC

*** org-web-tools 

[[https://github.com/alphapapa/org-web-tools][GitHub - alphapapa/org-web-tools: View, capture, and archive Web pages in Org-mode]]

#+BEGIN_SRC emacs-lisp :results	none
  (use-package org-web-tools
    :ensure t ; org-web-tools を自動的にインストール
    :after org
    :config
    (global-set-key (kbd "C-c i l") 'org-web-tools-insert-link-for-url))
#+END_SRC

*** org-preview-html: orgファイルのプレビュー

#+BEGIN_SRC emacs-lisp :results none
  (use-package org-preview-html
    :ensure t)
#+END_SRC

*** ox-gfm: GitHub Flavored Markdownをエクスポート

GitHub Flavored Markdownをエクスポートするためのパッケージ

#+BEGIN_SRC emacs-lisp :results none
  (use-package ox-gfm
    :ensure t
    :after org)
#+END_SRC

** dired: ファイラ
*** dired-toggle

画面左にdiredを開くコマンド

#+BEGIN_SRC emacs-lisp :results none
  (use-package dired-toggle
    :ensure t
    :bind (("C-x -" . dired-toggle))
    :config
    )
#+END_SRC

** autorevert: Emacsの外部でファイルが更新されたら自動読み込み

#+BEGIN_SRC emacs-lisp :results none
  (use-package autorevert
    :ensure t
    :config
    (setq auto-revert-interval 1) ; チェック間隔を1秒に設定
    (global-auto-revert-mode 1))  ; 全てのファイルバッファに対して自動リバートを有効にする
#+END_SRC

** dracro: ミニマクロ
#+BEGIN_SRC emacs-lisp :results none
  (use-package dmacro
    :ensure t
    :custom `((dmacro-key . ,(kbd "C-S-e")))
    :config
    (global-dmacro-mode))
#+END_SRC

** elscreen: 画面管理

#+BEGIN_SRC emacs-lisp :results none
  (use-package elscreen
    :ensure t
    :init
    (elscreen-start)
    :config
    ;; Define 's-e' as a prefix command
    (define-prefix-command 's-e-prefix)
    (global-set-key (kbd "s-e") 's-e-prefix)

    ;; Adjusting the previous configuration to use 's-e' prefix
    (define-key s-e-prefix (kbd "c") 'elscreen-create)
    (define-key s-e-prefix (kbd "n") 'elscreen-next)
    (define-key s-e-prefix (kbd "p") 'elscreen-previous)
    (global-set-key (kbd "C-<tab>") 'elscreen-next)
    (global-set-key (kbd "C-S-<tab>") 'elscreen-previous)
    (define-key s-e-prefix (kbd "k") 'elscreen-kill)
    (define-key s-e-prefix (kbd ",") 'elscreen-screen-nickname)
    (define-key s-e-prefix (kbd "0") 'elscreen-goto-0)
    (define-key s-e-prefix (kbd "1") 'elscreen-goto-1)
    (define-key s-e-prefix (kbd "2") 'elscreen-goto-2)
    (define-key s-e-prefix (kbd "3") 'elscreen-goto-3)
    (define-key s-e-prefix (kbd "4") 'elscreen-goto-4)
    (define-key s-e-prefix (kbd "5") 'elscreen-goto-5)
    (define-key s-e-prefix (kbd "6") 'elscreen-goto-6)
    (define-key s-e-prefix (kbd "7") 'elscreen-goto-7)
    (define-key s-e-prefix (kbd "8") 'elscreen-goto-8)
    (define-key s-e-prefix (kbd "9") 'elscreen-goto-9))
#+END_SRC

** migemo: ローマ字入力のままで日本語をインクリメンタル検索

cmigemoはhomebrewでインストールできた。\\
インストールコマンドは下記

#+BEGIN_SRC bash
  # brew install cmigemo
#+END_SRC

#+BEGIN_SRC emacs-lisp :results none
  (use-package migemo
    :ensure t
    :config
    (setq migemo-command "cmigemo")
    (setq migemo-options '("-q" "--emacs"))
    (setq migemo-dictionary "/opt/homebrew/share/migemo/utf-8/migemo-dict")
    (setq migemo-user-dictionary nil)
    (setq migemo-regex-dictionary nil)
    (setq migemo-coding-system 'utf-8-unix)
    (migemo-init))
#+END_SRC

** gptel: AI Chat

#+BEGIN_SRC emacs-lisp :results	none
  (use-package gptel
    :ensure t
    :config
    (setq gptel-api-key
          (auth-source-pick-first-password
           :host "api.openai.com"))
    (setq gptel-model "gpt-4")
    (setq gptel-default-mode 'org-mode))
#+END_SRC

** undo-tree

undoの履歴をtreeで表示できる。Emacsのundoがよく分からなかったので便利

#+BEGIN_SRC emacs-lisp :results	none
  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode)
    :config
    (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
    (setq undo-tree-auto-save-history t)
    :bind (("C-x u" . undo-tree-visualize))
    )
#+END_SRC
* Function
** お気に入りのコマンドだけ一覧する

- ~my/fav-commands~ に好きなコマンドを追加する

#+BEGIN_SRC emacs-lisp :results none
  (defvar my/fav-commands
    '(org-id-get-create ; org-roam ID付与
      org-toggle-inline-images ; org-modeインライン画像表示
      toggle-truncate-lines
      global-org-modern-mode
      org-preview-html-mode
      ))

  (defun my/execute-fav-command ()
    (interactive)
    (let ((command (completing-read "Command: " my/fav-commands nil t)))
      (call-interactively (intern command))))
  (global-set-key (kbd "s-n") 'my/execute-fav-command)
#+END_SRC

** Evil asterisk 拡張

#+BEGIN_SRC emacs-lisp :results	none
#+END_SRC

* Footer

#+BEGIN_SRC emacs-lisp :results none
  (provide 'init)

  ;; Local Variables:
  ;; indent-tabs-mode: nil
  ;; End:

  ;;; init.el ends here
#+END_SRC
