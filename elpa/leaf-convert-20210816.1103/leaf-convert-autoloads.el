;;; leaf-convert-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from leaf-convert.el

(autoload 'leaf-convert-insert-template "leaf-convert" "\
Insert template `leaf' block for PKG using package.el cache.
And kill generated leaf block to quick yank.

(fn PKG)" t)
(autoload 'leaf-convert "leaf-convert" "\
Convert BODY as plain Elisp to leaf format.

(fn &rest BODY)" nil t)
(autoload 'leaf-convert-region-replace "leaf-convert" "\
Replace Elisp BEG to END to leaf format.

This command support prefix argument.
  - With a normal, replace region with converted leaf form.
  - With a `\\[universal-argument]', insert converted leaf form after region.

(fn BEG END)" t)
(autoload 'leaf-convert-region-pop "leaf-convert" "\
Pop a buffer showing the result of converting Elisp BEG to END to a leaf.

(fn BEG END)" t)
(autoload 'leaf-convert-buffer-replace "leaf-convert" "\
Replace Elisp buffer to leaf form." t)
(autoload 'leaf-convert-buffer-pop "leaf-convert" "\
Pop converted leaf buffer from Elisp buffer." t)
(register-definition-prefixes "leaf-convert" '("leaf-convert-"))

;;; End of scraped data

(provide 'leaf-convert-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; leaf-convert-autoloads.el ends here
